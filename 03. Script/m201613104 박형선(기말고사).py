# -*- coding: utf-8 -*-
"""m201613104_박형선

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10BceHQbnieg_uKVVKc4WdB_wwJ91XJzS
"""

# 1.1)

# 화씨온도를 섭씨온도로 바꿈
def CelToFah(cel):
    return ((9 * cel) / 5) + 32

# 섭씨온도를 화씨온도로 바꿈
def FahToCel(fah):
    return (fah - 32) * 5 / 9


print("c or C : 섭씨 온도에서 화씨 온도 변환")
print("f or F : 화씨 온도에서 섭씨 온도 변환")

Temp1 = input("섭씨인지 화씨인지 선택하시오, 섭씨 : c or C, 화씨 : f or F ")

if Temp1 == 'c' or Temp1 == 'C':
    t = int(input("섭씨 온도 입력 : "))
    print("화씨 온도 :", CelToFah(t))

elif Temp1 == 'f' or Temp1 == 'F':
    t = int(input("화씨 온도 입력 : "))
    print("섭씨 온도 :", FahToCel(t))

else:
    print("잘못 입력하셨습니다.")

# 1.2)

# 화씨온도를 섭씨온도로 바꿈
def CelToFah(cel):
    return ((9 * cel) / 5) + 32

# 섭씨온도를 화씨온도로 바꿈
def FahToCel(fah):
    return (fah - 32) * 5 / 9

while True:  # 무한루프
    try:
        print("c or C : 섭씨 온도에서 화씨 온도 변환")
        print("f or F : 화씨 온도에서 섭씨 온도 변환")
        Temp1 = input("섭씨인지 화씨인지 선택하시오, 섭씨 : c or C, 화씨 : f or F ")
 
        if Temp1 == 'c' or Temp1 == 'C':
            t = int(input("섭씨 온도 입력 : "))
            print("화씨 온도 :", CelToFah(t))
            break # 무한루프 중단

        elif Temp1 == 'f' or Temp1 == 'F':
            t = int(input("화씨 온도 입력 : "))
            print("섭씨 온도 :", FahToCel(t))
            break # 무한루프 중단
                
        else:
            print("잘못 입력하셨습니다")
    
    except ValueError as e:
        print("ValueError 값이 입력되지 않았습니다.", e)

# 2번

pi = 3.14159

class Shape:

    def __init__(self):
        # 초기값 설정
        self.color = 'green' 
        self.filled = True
        
    def Area(self):
        pass
    def Perimeter(self):
        pass
    


class Circle(Shape):

    def __init__(self, radius):
        super().__init__()
        self.radius = radius  # float
    
    def Area(self):  # 원의 넓이 구하는 메소드
        return pi * (self.radius ** 2)

    def Diameter(self): # 원의 둘레 구하는 메소드
        return (2 * pi * self.radius)



class Rectangle(Shape):

    def __init__(self, width, height):
        super().__init__()
        self.__width = width
        self.__height = height
        
    def get_width(self):  # 가로 값 얻기
        return self.__width
    
    def set_width(self, x):
        self.__width = x  # 가로값 설정
        
    def get_height(self):  #  세로 값 얻기
        return self.__height

    def set_height(self, y): # 세로 값 설정
        self.__height = y

    def Area(self): # 사각형의 넓이 구하는 메소드
        return self.__width * self.__height

    def Perimeter(self):  # 사각형의 둘레 구하는 메소드
        return 2 * (self.__width + self.__height)

# a1을 Circle의 인스턴스화 하기 , 반지름은 1.5
a1 = Circle(1.5)

print("원의 색깔", a1.color, "원의 채우기", a1.filled)
print("넓이는 %.3f" % a1.Area(), "입니다")
print("둘레는 %.3f" % a1.Diameter(), "입니다.")

a1.color = 'blue'
a1.filled = False
a1.radius = 3

print("원의 색깔", a1.color, "원의 채우기", a1.filled)
print("넓이는 %.3f " % a1.Area(), "입니다")
print("둘레는 %.3f " % a1.Diameter(), "입니다.")


a2 = Rectangle(2, 4)

print("사각형의 색깔", a2.color, "사각형의 채우기", a2.filled)
print("넓이는", a2.Area(), "입니다.")
print("둘레는", a2.Perimeter(), "입니다.")

a2.color = 'pink'
a2.filled = 'False'
a2.set_width(3)
a2.set_height(5)

print("사각형의 색깔", a2.color, "사각형의 채우기", a2.filled)
print("넓이는", a2.Area(), "입니다.")
print("둘레는", a2.Perimeter(), "입니다.")

