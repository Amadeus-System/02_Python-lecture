# -*- coding: utf-8 -*-
"""p201613014_11 (Jupyter notebook 변환)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1boe_60ET8MvezjcDfbqclJ9fzE2w-uka
"""




'''
# 1. 정수를 특정 칸에 출력해보는 예시를 실행해보시오.

output_h = "{:+5d}".format(52)    # 기호를 뒤로 밀기 : 양수
output_i = '{:+5d}'.format(-52)   # 기호를 뒤로 밀기 : 음수
output_j = "{:=+5d}".format(52)   # 기호를 앞으로 밀기 : 양수
output_k = "{:=+5d}".format(-52)  # 기호를 앞으로 밀기 : 음수
output_l = "{:+05d}".format(52)   # 0으로 채우기 : 양수
output_m = "{:+05d}".format(-52)  # 0으로 채우기 : 음수

print('# 조합하기')
print(output_h)
print(output_i)
print(output_j)
print(output_k)
print(output_l)
print(output_m)
'''




'''
# 2. 부동소수점 출력 예시를 실행해 보시오.

output_a = "{:f}".format(52.273)     
output_b = "{:15f}".format(52.273)    # 15칸 만들기
output_c = "{:+15f}".format(52.273)   # 15칸에 부호 추가하기
output_d = "{:+015f}".format(52.273)  # 15칸에 부호 추가하고 0으로 채우기

print(output_a)
print(output_b)
print(output_c)
print(output_d)
'''




'''
# 3. 소수점 아래 자릿수 지정 예시를 실행해 보시오.

output_a = "{:15.3f}".format(52.273)  # 길이 15지정, 소수점 3자리까지 표현
output_b = "{:15.2f}".format(52.273)  # 길이 15지정, 소수점 2자리까지 표현
output_c = "{:15.1f}".format(52.273)  # 길이 15지정, 소수점 1자리까지 표현

print(output_a)
print(output_b)
print(output_c)
'''


# 4. 다음 결과 값이 나오게 문자열 포매팅을 이용하여 코드를 작성하시오.
'''
print('{:>5}'.format(12))
print('{:<}'.format(1234))
print('{:>8.3f}'.format(12.235))
print('{:0>5}'.format(12))
print('{:0>8.3f}'.format(12.235))
'''

'''
print('{: >5}'.format(12))   # 길이5 지정, 오른쪽 정렬
print('{: >8}'.format(12.235)) # 길이 8지정, 오른쪽 정렬
print('{:0<5}'.format(12))     # 길이 5지정, 오른쪽 정렬, 빈칸 0채움
print('{:=+8}'.format(-12.235)) # 길이 8지정, 오른쪽 정렬, 빈칸 0채움
'''




'''
# 5. 다음 주어진 문자열에 함수를 이용하여 원하는 결과를 출력하시오.
a = "Contrary to popular belief, Lorem Ipsum is not simply random text."

# 't'의 개수 출력
print(a.count('t'))

# 가장 먼저 나오는 'i'의 인덱스 출력
print(a.index('i'))

# 모두 대문자로 바꾼 뒤 출력
print(a.upper())

# 모두 소문자로 바꾼 뒤 출력
print(a.lower())

# 'a'를 'b'로 바꾼 뒤 출력
print(a.replace('a', 'b'))

# 문자열을 공백(" ")으로 나눈 것을 출력
print(a.split())
'''




'''
# 6.
# 표준 입력으로 물품 가격 여러 개가 문자열 한 줄로 입력되고,
# 각 가격은 ;(세미콜론)으로 구분되어 있다.
# 입력된 가격을 높은 가격 순으로 출력하는 프로그램을 만드시오.
# 이 때 가격은 전체의 길이 9, 오른쪽 정렬, 천단위로 ,(콤마)


# 여러 값 입력받으므로 mapping 함수 사용
# 입력값 : 51900;83000;158000;367500;250000;59200;128500;1304000
values = map(int, input("가격 입력하기 : ").split(';'))

values = list(values)      # 리스트로 만듬
values.sort(reverse=True)  # 내림차순 정렬

for i in values:  # 리스트 안의 각각의 값에 대하여
    print(format(i, ',').rjust(9))  # 천단위 컴마 찍고, 오른쪽정렬, 길이 9 설정하여 출력
'''





'''
# 7. 표준입력으로 문자열이 입력된다.
# 입력된 문자열에서 'the'의 개수를 출력하는 프로그램을 만드세요.
# 단 모든 문자가 소문자인 'the'만 찾으면 되며
# 'them', 'there', 'their'등은 포함하지 않아도 됩니다.
# 답 : 6

# 입력 텍스트(복사,붙여넣기) : """the grown-ups' response, this time, was to advise me to lay aside my drawings of boa constrictors, whether from the inside or the outside, and devote myself instead to geography, history, arithmetic, and grammar. That is why, at the, age of six, I gave up what might have been a magnificent career as a painter. I had been disheartened by the failure of my Drawing Number One and my Drawing Number Two. Grown-ups never understand anything by themselves, and it is tiresome for children to be always and forever explaining things to the."""

# 표준입력으로 문자열 받는다.
text = input("입력문자열:")

text.split()   # 입력받은 텍스트를 공백기준으로 분리하여 리스트로 변환
# 그러나 아직 문자열 요소의 앞이나 뒤에 ,(컴마)나 .(점)이 붙은 상태이므로
# 'the'를 정확히 탐색할 수 없다.
# 그러므로 문자열 요소들을 좀 더 깔끔하게 다듬어야 하므로...

new_text = []  # 새로운 빈 리스트 생성, 이 리스트에 다듬어진 문자열 요소 넣을 예정

for i in text.split():  # 공백기준으로 분리된 텍스트 리스트 안의 각 요소에 대하여

    # 좌우에 붙었을수도 있는 ,(컴마)와 .(점) 제거하여 새 리스트에 순차적으로 저장한다.
    new_text.append(i.strip(',.'))

print(new_text.count('the'))  # 깔끔하게 정리된 문자열 요소들 중 'the'를 찾는다.
'''



