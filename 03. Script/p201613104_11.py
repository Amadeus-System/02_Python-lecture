# -*- coding: utf-8 -*-
"""p201613104_11 (Jupyter notebook 변환)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zrLw9Zaqopm1rVHy0MsTVKnlyCI1_H6s
"""



'''
# 1. 다음 문제를 보고 해결하라.
# 1.1) 3가지 값을 인자로 받아 평균을 계산하는 함수를 작성하시오.
#      함수의 이름은 average로 한다.

def average(x1, x2, x3): # 평균 계산하는 함수 정의, 위치인자 3개 받음
    result = (x1 + x2 + x3) / 3  # 평균값 계산
    return result  # 평균값 출력

# 출력 확인
avg = average(1, 2, 3)
print(avg)
'''



'''
# 1.2) 가변 인수를 이용하여 숫자의 개수에 상관없이 평균을 계산하는 함수를 작성하시오.
#      함수 이름은 va_average 로 한다.

# 가변인수로 입력받고 숫자 개수 상관없이 평균계산 하는 함수 정의
def va_average(*args):
    
    sum = 0  # 덧셈 초기값 정의
    for arg in args:  # 각각의 숫자에 대하여..
        sum += arg  # 각각의 argument들을 모두 sum에 더해나간 뒤

    mean = sum / len(args) # argument들의 숫자로 나눠서 평균을 정의한다
    
    return mean # 평균 출력

# 출력 확인!
print(va_average(4,5,4))
print(va_average(23,1,3,4,5,6,7))
'''




'''
# 1.3) 딕셔너리 언패킹을 이용하여 개수에 상관없이 평균을 계산하는 함수를 작성하시오.
#      함수 이름은 du_average로 한다

def du_average(**kwargs): # 딕셔너리 언패킹 사용하여 가변 인수를 받는 함수
    
    sum = 0  # 덧셈 초기값 정의
    for kw, arg in kwargs.items():  # 딕셔너리의 각각의 키와 값을 불러들이고..
        sum += arg  # 값만 sum에 모두 더해나간다.
    
    mean = sum / len(kwargs) # 딕셔너리 개수로 나눠서 평균 계산
    return mean  # 평균 출력

# 출력 확인!
x = {'국어':80, '영어':100, '수학':70, '과학':60}
print(du_average(**x))

x = {'국어':80, '영어':100}
print(du_average(**x))
'''





'''
# 2. 6주차 때 만들었던 계산기 프로그램을 이번시간에 배운 함수를 통하여 바꿔보자
# 덧셈 함수의 이름은 add, 뺄셈 함수의 이름은 sub, 곱하기 함수의 이름은 mul, 나누기 함수의 이름은 div이다.
# 그리고 1~4이외의 다른 수가 입력되면, 반복하고
# 양의 정수가 입력 안된 경우도 반복하게 하라.


# 함수 정의
def add(a, b):  # 덧셈 함수
    return a + b

def sub(a, b):  # 뺄셈 함수
    return a - b

def mul(a, b):  # 곱셈 함수
    return a * b

def div(a, b):  # 나눗셈 함수
    return a / b  # 나눗셈 연산은 0으로 나눌 때, zero division error 발생하는 것 주의!


while True: # 무한 loop문으로 입력 제대로 될때까지 반복!

    print("1.덧셈 2.뺄셈 3.곱셈 4.나눗셈")
    number = int(input("어떤 연산을 원하는지 번호를 입력하세요 : "))
    
    if number in [1, 2, 3, 4]:  # 연산번호 제대로 입력했다면..

        # 연산을 할 2개의 수를 표준입력으로 받는다.  
        print("연산을 원하는 숫자 2개를 입력하세요(양의 정수만 가능) ")
        a = int(input())
        b = int(input())
    
        if a > 0 and b > 0 :  # 2개의 양수 제대로 입력 되었다면...
         
            if number == 1:
                print(str(a) + ' + ' +  str(b) + ' = ' + str(add(a,b)))
                break
            
            elif number == 2:
                print(str(a) + ' - ' + str(b) + ' = ' + str(sub(a,b)))
                break
            
            elif number == 3:
                print(str(a) + ' * ' + str(b) + ' = ' + str(mul(a,b)))
                break
            
            elif number == 4:
                print(str(a) + ' / ' + str(b) + ' = ' + str(div(a,b)))
                break
        
        else:  # 연산을 원하는 수가 양의정수로 입력되지 않았다면..
            print("양의 정수를 입력하세요.")
            continue # 다시 실행

    else:  # 연산 번호 제대로 입력 안되면..
        print("잘못 입력하였습니다.")
        continue  # 다시 실행
'''





'''
# 3. 커피 자판기에서 음료 구매를 위한 프로그램 제작 의뢰가 들어왔다.

print("안녕하세요 ** Coffee 입니다.")

# 표준입력으로 메뉴 / 찬 음료인지 뜨거운 음료인지 / 사이즈를 입력받는다.
menu = input("메뉴를 선택해주세요 : Americano(4200) / Cafe Mocha(5200) / Cafe latte(4600) / Flat white(3000) : ") # Americano
temp = input("찬 음료인지 뜨거운 음료인지 선택해주세요 : Hot/Ice : ")  # Hot
size = input("사이즈를 선택해주세요 : S(short) / G(grande) + 500 / V(venti) + 1000 / : ") # S

# 커피 종류 선택 함수
def menu_choice(menu):
    if menu == 'Americano':
        return 4200
    elif menu == 'Cafe mocha':
        return 5200
    elif menu == 'Cafe latte':
        return 4600
    elif menu == 'Flat white':
        return 3000


# 사이즈 선택 함수
def size_choice(size):
    if size == 'S':
        return 0
    elif size == 'G':
        return 500
    elif size == 'V':
        return 1000


# Hot/Ice 선택 함수
def Hot_Ice_choice(temp):
    if temp == 'Hot':
        return 0
    elif temp == 'Ice':
        return 500

# 총 금액을 위에 정의된 함수를 이용하여 계산
총_금액 = menu_choice(menu) + size_choice(size) + Hot_Ice_choice(temp)

# 문장 출력
print('주문하신 ' + temp + ' ' + menu + ' ' + size + " size 나왔습니다. 총 금액은 " + str(총_금액) + " 원 입니다. 감사합니다")
'''





'''
# 4. 표준 입력으로 정수 1개를 입력받아 입력된 정수에 해당하는 피보나치 수열을 출력하라.
#    다음번 피보나치의 수는 바로 앞의 두 피보나치 수의 합이다.
#    처음 두 항은 0과 1로 정해져 있다.

# 전 시간에 함수를 배웠으니 함수 정의로 코딩한다면 다음과 같이 할 수 있다.

def fibonacci(): # 인수 입력 없이 실행하면 정수 1개 입력받아 그 수에 해당하는 피보나치 수를 출력하는 함수

    number = int(input("숫자를 입력하시오 : ")) # 표준입력으로 정수 1개 입력받음

    fibonacci = [0, 1] # 피보나치 수열 리스트, 초기항 2개는 미리 들어있다.
    for i in range(2, number + 1):
        # 피보나치 수열의 원리에 따라 이전의 두항을 더하여 새로운 항으로 추가해 나간다.
        fibonacci.append(fibonacci[i-2] + fibonacci[i-1])

    # 마지막 부분은 반환값을 명확히 표현하는 return으로 해도 되고
    # 혹은 print를 써도 출력형태는 똑같이 맞출수 있다.
    return (fibonacci[number])  # 입력받은 수에 해당하는 피보나치 수 출력

# 출력 확인
print(fibonacci())
'''


'''
# 함수 정의 없이한 코드
# 이 문제는 사실 간단해서 함수 정의 없이도 할 수 있다.
# 위의 코드에서 함수 정의를 풀어서 쓰면 다음과 같다.

number = int(input("숫자를 입력하시오 : ")) # 표준입력으로 정수 입력받음

fibonacci = [0, 1] # 피보나치 수열의 각 항들을 순서대로 넣을 리스트
                   # 초기 항 2가지는 이미 들어있다.

for i in range(2, number + 1): # 0번째, 1번째 항은 이미 있으므로 2번째 항부터 number 항까지 채워나감.

    # 피보나치 수열의 일반항을 얻는 점화식에 따라 이전의 두 항을 더하여 새로운 항으로 피보나치 수열에 추가해 나간다.
    fibonacci.append(fibonacci[i-2] + fibonacci[i-1])

# 출력 확인!
print(fibonacci[number]) # 특정 항까지의 피보나치 수 출력
'''

