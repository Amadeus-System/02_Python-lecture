# -*- coding: utf-8 -*-
"""파이썬 프로그래밍 14주차 과제

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JAcUnNinhDx6VJqGoGWQRDc_4M6kCj4q
"""

'''
# 1. 표준입력으로 게임 캐릭터 능력치(체력(health), 마나(mana), AP(ability_power))가 입력된다.
#    입력값은 실수값이다.
# 클래스 Annie를 생성하여 티버의 스킬의 피해량이 출력되게 구현하라.
# 클래스의 속성은 체력(health), 마나(mana), AP(ability_power)로 구성되며
# 클래스는 생성자(__init__), 메소드 tibbers()로 구성된다.
# tibbers()는 피해량을 출력한다.
# 티버의 피해량은 AP * 0.65 + 400, AP(주문력)을 뜻함


# 클래스 Annie 생성
class Annie:
    
    # 생성자 정의
    def __init__(self, health, mana, ability_power):

        # 표준입력받은 체력, 마나, AP를 속성값으로 넘겨준다.
        self.health = health
        self.mana   = mana
        self.AP     = ability_power
        
        # 인스턴스 생성되면서 기본 능력치 출력
        print("기본능력치 :  체력 :", self.health, " 마나 :",self.mana, " 주문력 :", self.AP)

    
    def tibbers(self): # 피해량을 출력하는 메소드 정의
        result = self.AP * 0.65 + 400
        print("티버의 피해량 :", result)
          

# 출력결과 확인!

# 표준입력으로 체력, 마나, AP를 입력받는다. 실수값 입력이므로 float으로 형변환   
health, mana, ability_power = map(float, input("애니 능력치를 입력하세요(체력, 마나, AP) : ").split())

# Annie 클래스로 x라는 인스턴스 생성한다.
x = Annie(health, mana, ability_power)

# 인스턴스 x에서 tibbers() 메소드 실행
x.tibbers()
'''



'''
# 2. Tv를 클래스로 정의해보자.
# 클래스 Tv는 채널(Channel), 볼륨(volume), 전원상태(On)의 3가지 속성으로 구성된다.
# (초기값 : 채널 = 1, 볼륨 = 5, 전원상태 = False)
# 클래스 Tv는 생성자(__init__), TV 켜기(runOn), TV 끄기(turnOff), 채널설정(setChannel()), 볼륨 설정(setVolume())
# 으로 구성된다.
# 클래스 Tv 변수들은 생성자 안에서 정의한다.


# 클래스 Tv 선언
class Tv:

    # 생성자 정의 : 3가지 속성값으로 구성, 초기값을 속성값으로 넘겨준다.
    def __init__(self, Channel=1, volume=5, On=False):
        self.Channel = Channel
        self.volume  = volume
        self.On      = On

    def turnOn(self):  # TV켜기 메소드
        print('Tv on')

    def turnoff(self): # TV끄기 메소드
        print("Tv off")


    def setChannel(self, x):  # 채널설정 메소드
        print("Tv Channel :", x)
    
    def setVolume(self, x):  # 볼륨설정 메소드
        print("Tv volume :", x)


# 출력 결과 확인!
# Tv 클래스로 tv라는 이름의 인스턴스 선언
tv = Tv()

# Tv켜기 메소드 사용
tv.turnOn()

# 채널설정 메소드 사용
tv.setChannel(11)

# 볼륨설정 메소드 사용
tv.setVolume(7)
'''





'''
# 3.
# BMI를 계산하는 BMI 클래스를 설계해보자.
# BMI 인스턴스를 생성하고 키와 체중을 넘겨주면 BMI값과 비만도를 계산한 결과를 출력하자.
# 클래스의 속성은 체중(weight), 키(height)로 구성이 되며
# 클래스는 생성자(__init__), calc_BMI(BMI를 계산하는 메소드), BMI_Judge(결과를 표시하는 메소드)로 구성된다.


# BMI 클래스 선언
class BMI:

    # 생성자 정의 : 체중(weight), 키(height)를 속성값으로 넘겨준다.
    def __init__(self, weight, height):
        self.weight = weight
        self.height = height
       
    
    # BMI를 계산하는 메소드
    def cal_BMI(self):
        BMI = self.weight / (self.height ** 2) # BMI 계산
        print('BMI = %.3f' % BMI) # 소수점 3자리까지만 출력
      

    # 비만도 판정 결과를 표시하는 메소드 
    def BMI_Judge(self):
        BMI = self.weight / (self.height ** 2) # BMI 계산

        # BMI 값이 어떤 범위에 속한지에 따라 비만도 판정결과를 출력한다.
        if BMI < 20:
            print("저체중입니다.")
        elif 20 <= BMI < 24.9:
            print("정상입니다.")
        elif 25 <= BMI < 29.9:
            print("과체중입니다.")
        elif BMI >= 30:
            print("비만입니다.")



# 출력 결과 확인!
person1 = BMI(65, 1.70)
person1.cal_BMI()
person1.BMI_Judge()

person2 = BMI(76, 1.65)
person2.cal_BMI()
person2.BMI_Judge()

person3 = BMI(50, 1.80)
person3.cal_BMI()
person3.BMI_Judge()
'''




'''
# 4.
# 은행계좌 클래스를 생성한다.
# 클래스 이름은 Bank_Account이고, 은행계좌는 현재 잔액(balance)만을 속성으로 가진다. (초기값 : 0)
# 클래스 Bank_Account는 생성자(__init__), 인출 메소드(withdraw()), 저축 메소드(deposit())으로 구성된다.
# 현재 잔액은 비공개 속성을 가진다.
# 인출 메소드, 저축 메소드는 print 함수를 이용하여 입금, 출금 금액을 출력하고, 잔액을 반환한다.
# 인출 메소드에서 현재 잔액이 0보다 작은 경우 "잔액이 없습니다" 출력


# 은행계좌 클래스 선언
class Back_Account:

    # 생성자 정의 
    def __init__(self):
        # 현재잔액(balance)를 비공개속성(앞에 __)으로 처리하고 초기값 0 지정
        self.__balance = 0 

    # 인출 메소드 정의 : x는 출금 금액
    def withdraw(self, x):

        if self.__balance == 0:  # 현재잔액이 0이면 
            print("잔액이 없습니다.")  # "잔액이 없습니다" 라고 출력
        else:  # 잔액이 남아 있다면
            self.__balance -= x # 출금 금액 x만큼을 현재잔액에서 뺀다.
            print("출금 :", x)  # print함수 이용하여 출금 금액 출력
            print(self.__balance) 
            # 교수님께 질문
            # 문제에서 잔액을 반환(return)한다고 했는데 return을 의도하신게 아닌가요?
            # 그런데, 반환(return)으로 하면 출력결과가 다르게 나와서 마지막에 print로 처리했습니다. 

        
    # 저축 메소드 정의 : x는 입금 금액
    def deposit(self, x):
        self.__balance += x  # 입금 금액만큼을 현재잔액(balance)에 더해 저장
        print("입금 :", x)   # print 함수 이용하여 입금 금액 출력
        print(self.__balance)
        # 교수님께 질문
        # 문제에서 잔액을 반환(return)한다고 했는데 return을 의도하신게 아닌가요?
        # 그런데, 반환으로 하면 출력결과가 다르게 나와서 마지막에 print로 처리했습니다. 



# 출력 결과 확인!

# 은행계좌 클래스로 jack이라는 이름의 인스턴스 생성
jack = Back_Account()

# 저축 메소드를 사용하여 100 만큼 입금
jack.deposit(100)

# 인출 메소드를 사용하여 20 만큼 출금
jack.withdraw(20)

# 인출 메소드를 사용하여 80 만큼 출금
jack.withdraw(80)

# 인출 메소드를 사용하여 30 만큼 출금
jack.withdraw(30)
'''
